{"version":3,"sources":["components/card.jsx","components/cardContainer.jsx","components/alert.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_this","this","react_default","a","createElement","style","width","className","getClasses","onClick","props","number","concat","Component","CardContainer","margin","numbers","map","card","key","id","Alert","state","showAlert","close","nextProps","setState","_this2","started","document","getElementById","click","type","Navbar","time","totalSeconds","Fragment","start","disabled","stop","cardContainer","bind","components_alert","run","_this3","setTimer","setInterval","Math","floor","clearInterval","randomNumbers","timer","Object","toConsumableArray","i","x","random","temp","index1","index2","_this4","self","index","indexOf","blankIndex","abs","objectSpread","clickedValue","isSorted","check","swap","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","n","push","swappable","Swappable","querySelectorAll","draggable","mirror","constrainDimensions","swapped","on","nodes","getElementsByClassName","innerHTML","toString","navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1936d993.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"25%\" }}>\r\n        <div className=\"draggable\">\r\n          <div\r\n            className={this.getClasses()}\r\n            onClick={() => this.props.onClick(this.props.number)}\r\n          >\r\n            <div className=\"content\">{this.props.number.number}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getClasses() {\r\n    return `card m-1 square ${\r\n      this.props.number.number === \"\" ? \"bg-dark\" : \"bg-primary\"\r\n    }`;\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./card\";\r\nclass CardContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid bg-dark\">\r\n        <div className=\"row \" style={{ width: \"40%\", margin: \" 0 auto\" }}>\r\n          {this.props.numbers.map(number => {\r\n            return (\r\n              <Card\r\n                key={number.id}\r\n                number={number}\r\n                onClick={this.props.onClick}\r\n                numbers={this.props.numbers}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardContainer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Alert extends Component {\r\n  state = {\r\n    showAlert: this.props.showAlert,\r\n    close: false\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.showAlert !== this.state.showAlert) {\r\n      this.setState({ showAlert: nextProps.showAlert });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.props.started && this.state.close) {\r\n      this.setState({ close: false });\r\n    }\r\n    if (this.state.showAlert === true && this.state.close === false) {\r\n      document.getElementById(\"stopBtn\").click(); //stop the timer (click stop button)\r\n      return (\r\n        <div className=\"alert alert-primary alert-dismissible fixed-bottom\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => {\r\n              this.setState({ close: true }); //if close clicked set true\r\n            }}\r\n          >\r\n            &times;\r\n          </button>\r\n          <strong>Completed!</strong>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Alert;\r\n","import React, { Component } from \"react\";\r\nimport CardContainer from \"./cardContainer\";\r\nimport Alert from \"./alert\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    numbers: this.props.numbers,\r\n    started: false,\r\n    time: \"0:0:0\",\r\n    showAlert: this.props.showAlert\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.showAlert !== this.state.showAlert) {\r\n      this.setState({ showAlert: nextProps.showAlert });\r\n    }\r\n    if (nextProps.numbers !== this.state.numbers) {\r\n      this.setState({ numbers: nextProps.numbers });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar bg-secondary \">\r\n          <div style={{ margin: \" 0 auto\" }}>\r\n            <span className=\"badge badge-pill badge-info\">\r\n              {this.state.time}\r\n            </span>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary m-2\"\r\n              onClick={() => this.start()}\r\n              disabled={this.state.started}\r\n            >\r\n              Start\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              id=\"stopBtn\"\r\n              className=\"btn btn-danger m-2\"\r\n              onClick={() => this.stop()}\r\n              disabled={!this.state.started}\r\n            >\r\n              Stop\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        <CardContainer\r\n          numbers={this.state.numbers}\r\n          onClick={this.onClick.bind(this)}\r\n        />\r\n\r\n        <Alert\r\n          showAlert={this.state.showAlert}\r\n          close={this.props.close}\r\n          started={this.state.started}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  setTimer;\r\n  totalSeconds = 0;\r\n  timer(run) {\r\n    if (run) {\r\n      this.setTimer = setInterval(() => {\r\n        this.totalSeconds += 1;\r\n        let time = `${Math.floor(this.totalSeconds / 3600)} : ${Math.floor(\r\n          this.totalSeconds / 60\r\n        )} : ${this.totalSeconds % 60}`;\r\n        this.setState({ time: time });\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(this.setTimer);\r\n      this.totalSeconds = 0;\r\n    }\r\n  }\r\n  start() {\r\n    this.randomNumbers();\r\n    if (this.props.showAlert) {\r\n      this.setState({ showAlert: false });\r\n    } //if already sort before started will be true\r\n    this.setState({ started: true, close: false });\r\n    this.timer(true); //enable timer\r\n  }\r\n  stop() {\r\n    this.setState({ started: false });\r\n    this.timer(false); //disable timer\r\n  }\r\n  randomNumbers() {\r\n    let numbers = [...this.state.numbers];\r\n    for (let i = 1; i < 16; i++) {\r\n      var x = Math.floor(Math.random() * 15); /*x= 0~15 random */\r\n      var temp = numbers[x]; /*temp=arr[random]*/\r\n      numbers[x] = numbers[i];\r\n      numbers[i] = temp; /*swap(arr[x],arr[i])*/\r\n    }\r\n    this.setState({ numbers: numbers });\r\n  }\r\n  onClick(number) {\r\n    const self = this;\r\n    const index = this.state.numbers.indexOf(number); //find clicked index in numbers\r\n    const blankIndex = (() => {\r\n      //find blank index in numbers\r\n      for (let i = 0; i < 16; i++)\r\n        if (this.state.numbers[i].number === \"\") return i;\r\n    })();\r\n\r\n    if (isNear(index, blankIndex)) {\r\n      swap(index, blankIndex);\r\n    }\r\n\r\n    function swap(index, blankIndex) {\r\n      const numbers = [...self.state.numbers];\r\n      numbers[index] = { ...self.state.numbers[index] };\r\n      numbers[blankIndex] = { ...numbers[blankIndex] };\r\n      const clickedValue = self.state.numbers[index].number;\r\n      numbers[index].number = \"\";\r\n      numbers[blankIndex].number = clickedValue;\r\n\r\n      self.setState({ numbers: numbers });\r\n      check(numbers);\r\n    }\r\n    function isNear(index1, index2) {\r\n      if (Math.abs(index1 - index2) === 1 || Math.abs(index1 - index2) === 4)\r\n        return true;\r\n      else return false;\r\n    }\r\n    function check(numbers) {\r\n      let isSorted = true;\r\n      for (let i = 0; i < 15; i++) {\r\n        if (isSorted) {\r\n          if (numbers[i].number === numbers[i].id) {\r\n            isSorted = true;\r\n          } else isSorted = false;\r\n        }\r\n      }\r\n      if (isSorted) {\r\n        self.setState({ showAlert: true });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Swappable } from \"@shopify/draggable\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    let numbers = [];\n    for (let n = 1; n < 16; n++) {\n      numbers.push({ id: n, number: n });\n    }\n    numbers.push({ id: 16, number: \"\" });\n\n    this.state = { numbers: numbers };\n  }\n  componentDidMount() {\n    const swappable = new Swappable(\n      document.querySelectorAll(\".container-fluid\"),\n      {\n        draggable: \".draggable\",\n        mirror: {\n          constrainDimensions: true\n        }\n      }\n    );\n\n    var swapped = false; //determine whether the number div is swapped\n    swappable.on(\"swappable:swapped\", function() {\n      swapped = true;\n    });\n    swappable.on(\"swappable:stop\", () => {});\n    setInterval(function() {\n      if (swapped) {\n        check();\n        swapped = false;\n      }\n    }, 1500);\n\n    const self = this;\n    function check() {\n      let nodes = document.getElementsByClassName(\"content\");\n      let isSorted = true;\n      for (let i = 0; i < 15; i++) {\n        if (isSorted) {\n          if (nodes[i].innerHTML === (i + 1).toString()) {\n            isSorted = true;\n          } else isSorted = false;\n        }\n      }\n      if (isSorted) {\n        self.setState({ showAlert: true });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar numbers={this.state.numbers} showAlert={this.state.showAlert} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}