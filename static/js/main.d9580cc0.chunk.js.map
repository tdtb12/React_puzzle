{"version":3,"sources":["components/card.jsx","components/cardContainer.jsx","components/alert.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_this","this","react_default","a","createElement","style","width","className","getClasses","onClick","props","number","concat","Component","CardContainer","margin","numbers","map","card","key","id","check","Alert","state","close","_this2","showAlert","type","setState","Navbar","started","stopped","time","totalSeconds","start","disabled","stop","run","_this3","setTimer","setInterval","Math","floor","clearInterval","Object","objectSpread","timer","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","index","indexOf","blankIndex","i","isNear","swap","toConsumableArray","clickedValue","index1","index2","abs","isSorted","n","push","x","random","temp","swappable","Swappable","document","querySelectorAll","draggable","mirror","constrainDimensions","swapped","on","nodes","getElementsByClassName","innerHTML","toString","self","Fragment","navbar","cardContainer","components_alert","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9580cc0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"25%\" }}>\r\n        <div className=\"draggable\">\r\n          <div\r\n            className={this.getClasses()}\r\n            onClick={() => this.props.onClick(this.props.number)}\r\n          >\r\n            <div className=\"content\">{this.props.number.number}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getClasses() {\r\n    return `card m-1 square ${\r\n      this.props.number.number === \"\" ? \"bg-dark\" : \"bg-primary\"\r\n    }`;\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./card\";\r\nclass CardContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid bg-dark\">\r\n        <div className=\"row \" style={{ width: \"40%\", margin: \" 0 auto\" }}>\r\n          {this.props.numbers.map(number => {\r\n            //const index = this.state.numbers.indexOf(number.id);\r\n            return (\r\n              <Card\r\n                key={number.id}\r\n                number={number}\r\n                onClick={this.props.onClick}\r\n                check={this.props.check}\r\n                numbers={this.props.numbers}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardContainer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Alert extends Component {\r\n  state = {\r\n    close: false //local state to determine whether close button is clicked\r\n  };\r\n  render() {\r\n    if (this.props.showAlert === true && this.state.close === false) {\r\n      return (\r\n        <div className=\"alert alert-primary alert-dismissible fixed-bottom\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => {\r\n              this.setState({ close: true }); //if close clicked set true\r\n            }}\r\n          >\r\n            &times;\r\n          </button>\r\n          <strong>Completed!</strong>\r\n        </div>\r\n      );\r\n    } else {\r\n      this.state.close = false;\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Alert;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    numbers: this.props.numbers,\r\n    started: false,\r\n    stopped: false,\r\n    time: \"0:0:0\"\r\n  };\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar bg-secondary \">\r\n        <div style={{ margin: \" 0 auto\" }}>\r\n          <span className=\"badge badge-pill badge-info\">{this.state.time}</span>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary m-2\"\r\n            onClick={() => this.start()}\r\n            disabled={this.state.started}\r\n          >\r\n            Start\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger m-2\"\r\n            onClick={() => this.stop()}\r\n            disabled={!this.state.started}\r\n          >\r\n            Stop\r\n          </button>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n  setTimer;\r\n  totalSeconds = 0;\r\n  timer(run) {\r\n    if (run) {\r\n      this.setTimer = setInterval(() => {\r\n        this.totalSeconds += 1;\r\n        let time = `${Math.floor(this.totalSeconds / 3600)} : ${Math.floor(\r\n          this.totalSeconds / 60\r\n        )} : ${this.totalSeconds % 60}`;\r\n        this.setState({ time: time });\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(this.setTimer);\r\n      this.totalSeconds = 0;\r\n      this.setState({ time: \"0 : 0 : 0\" });\r\n    }\r\n  }\r\n  start() {\r\n    let started = { ...this.state.started };\r\n    this.setState({ started: started });\r\n    this.timer(true);\r\n  }\r\n  stop() {\r\n    let started = { ...this.state.started };\r\n    this.setState({ started: !started });\r\n    this.timer(false);\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardContainer from \"./components/cardContainer\";\nimport { Swappable } from \"@shopify/draggable\";\nimport Alert from \"./components/alert\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    let numbers = [];\n    for (let n = 1; n < 16; n++) {\n      numbers.push({ id: n, number: n });\n    }\n    numbers.push({ id: 16, number: \"\" });\n    for (let i = 1; i <= 8; i++) {\n      var x = Math.floor(Math.random() * 8); /*x= 0~8 random */\n      var temp = numbers[x]; /*temp=arr[random]*/\n      numbers[x] = numbers[i];\n      numbers[i] = temp; /*swap(arr[x],arr[i])*/\n    }\n    this.state = { numbers: numbers, showAlert: false };\n  }\n  componentDidMount() {\n    const swappable = new Swappable(\n      document.querySelectorAll(\".container-fluid\"),\n      {\n        draggable: \".draggable\",\n        mirror: {\n          constrainDimensions: true\n        }\n      }\n    );\n\n    var swapped = false; //determine whether the number div is swapped\n    swappable.on(\"swappable:swapped\", function() {\n      swapped = true;\n    });\n    setInterval(function() {\n      if (swapped) {\n        check();\n        swapped = false;\n      }\n    }, 1500);\n\n    const self = this;\n    function check() {\n      let nodes = document.getElementsByClassName(\"content\");\n      let isSorted = true;\n      for (let i = 0; i < 15; i++) {\n        if (isSorted) {\n          if (nodes[i].innerHTML == (i + 1).toString()) {\n            isSorted = true;\n          } else isSorted = false;\n        }\n      }\n      let showAlert = { ...self.state.showAlert };\n      showAlert = isSorted;\n      self.setState({ showAlert: showAlert });\n    }\n  }\n\n  onClick = number => {\n    const index = this.state.numbers.indexOf(number); //find clicked index in numbers\n    const blankIndex = (() => {\n      //find blank index in numbers\n      for (let i = 0; i < 16; i++)\n        if (this.state.numbers[i].number === \"\") return i;\n    })();\n    if (this.isNear(index, blankIndex)) {\n      this.swap(index, blankIndex);\n    }\n  };\n\n  swap = (index, blankIndex) => {\n    const numbers = [...this.state.numbers];\n    numbers[index] = { ...this.state.numbers[index] };\n    numbers[blankIndex] = { ...numbers[blankIndex] };\n    const clickedValue = this.state.numbers[index].number;\n    numbers[index].number = \"\";\n    numbers[blankIndex].number = clickedValue;\n\n    this.setState({ numbers: numbers });\n    this.check(numbers);\n  };\n  isNear = (index1, index2) => {\n    if (Math.abs(index1 - index2) === 1 || Math.abs(index1 - index2) === 4)\n      return true;\n    else return false;\n  };\n\n  check = numbers => {\n    let isSorted = true;\n    for (let i = 0; i < 15; i++) {\n      if (isSorted) {\n        if (numbers[i].number === numbers[i].id) {\n          isSorted = true;\n        } else isSorted = false;\n      }\n    }\n    let showAlert = { ...this.state.showAlert };\n    showAlert = isSorted;\n    this.setState({ showAlert: showAlert });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <CardContainer\n          numbers={this.state.numbers}\n          onClick={this.onClick}\n          check={this.check}\n        />\n\n        <Alert showAlert={this.state.showAlert} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}